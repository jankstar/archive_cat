// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]

use chrono::NaiveDateTime;
use diesel::{ Insertable, Queryable, Selectable, Table, AsChangeset};
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug, Selectable, Queryable, AsChangeset)]
#[diesel(table_name = crate::schema::document)]
pub struct  DocumentSmall {
    pub id: String,
    pub subject: String, 
    pub status: String,
    pub date: String,
    pub sender_name: Option<String>,
    pub sender_addr: Option<String>,
    pub recipient_name: Option<String>,
    pub recipient_addr: Option<String>,   
    pub from: Option<String>,
    pub to: Option<String>,
    pub category: Option<String>,
    pub amount: Option<f64>,   
    pub currency: Option<String>,
    pub body: Option<String>, 
    pub filename: Option<String>,
    pub file_extension: Option<String>,
    pub file: Option<String>,
    pub protocol: String,
    pub deleted_at: Option<String>,
}

#[derive(Serialize, Deserialize, Debug, Selectable, Queryable, AsChangeset)]
#[diesel(table_name = crate::schema::document)]
pub struct  DocumentFile { 
    pub id: String,
    pub sub_path: Option<String>,
    pub filename: Option<String>,
    pub file_extension: Option<String>,
    pub file: Option<String>,
    pub base64: Option<String>,
}

#[derive(Serialize, Deserialize, Debug, Selectable, Insertable, Queryable, AsChangeset)]
#[diesel(table_name = crate::schema::document)]
pub struct Document {
    pub id: String,
    pub subject: String,
    pub status: String,
    pub date: String,
    pub sender_name: Option<String>,
    pub sender_addr: Option<String>,
    pub recipient_name: Option<String>,
    pub recipient_addr: Option<String>,
    pub from: Option<String>,
    pub to: Option<String>,
    pub body: Option<String>,
    pub document_type: Option<String>,
    pub metadata: Option<String>,
    pub category: Option<String>,
    pub amount: Option<f64>,   
    pub currency: Option<String>,
    pub template_name: Option<String>,
    pub doc_data: Option<String>,
    pub input_path: Option<String>,
    pub langu: Option<String>,
    pub num_pages: Option<f64>,
    pub protocol: String,
    pub sub_path: Option<String>,
    pub filename: Option<String>,
    pub file_extension: Option<String>,
    pub file: Option<String>,
    pub base64: Option<String>,
    pub ocr_data: Option<String>,
    pub jpg_file: Option<String>,
    pub parent_document: Option<String>,
    pub created_at: String,
    pub updated_at: String,
    pub deleted_at: Option<String>,
}

#[derive(Serialize, Deserialize, Queryable, Debug, Selectable, Insertable)]
#[diesel(table_name = crate::schema::ftp_data)]
pub struct FtpData {
    pub id: Option<i32>,
    pub host: String,
    pub user: Option<String>,
    pub password: Option<String>,
    pub dir: Option<String>,
    pub filter: Option<String>,
    pub created_at: String,
    pub updated_at: String,
    pub deleted_at: Option<String>,
}

#[derive(Serialize, Deserialize, Queryable, Debug, Selectable, Insertable)]
#[diesel(table_name = crate::schema::mail_data)]
pub struct MailData {
    pub id: Option<i32>,
    pub email: String,
    pub mail_box: Option<String>,
    pub token_access_token: Option<String>,
    pub token_token_type: Option<String>,
    pub token_refresh_token: Option<String>,
    pub token_expiry: Option<String>,
    pub created_at: String,
    pub updated_at: String,
    pub deleted_at: Option<String>,
}
